import {
  Descriptor,
  ComponentBuilderContext,
  RNComponentFactory,
  RNOHContext,
  RNViewBase,
  ViewBaseProps,
  ColorSegments,
  BorderColors,
  Tag
} from 'rnoh';
import Logger from './Logger';

export const CELL_CONTAINER_TYPE: string = "CellContainer";

export interface CellContainerProps extends ViewBaseProps {
  index: number
  right: number
  bottom: number
  top: number
  left: number
  height: number
  width: number
  backgroundColor: ColorSegments
  borderColor: BorderColors
}

export type CellContainerDescriptor = Descriptor<"CellContainer", CellContainerProps>

@Component
export struct RNCellContainer {
  ctx!: RNOHContext
  tag: number
  @BuilderParam buildCustomComponent: (componentBuilderContext: ComponentBuilderContext) => void
  @State descriptor: CellContainerDescriptor = {} as CellContainerDescriptor
  private unregisterDescriptorChangesListener?: () => void = undefined
  @State index: number = -1;
  @State top: number = 0;

  aboutToAppear() {
    this.descriptor = this.ctx.descriptorRegistry.getDescriptor<CellContainerDescriptor>(this.tag)
    this.unregisterDescriptorChangesListener = this.ctx.descriptorRegistry.subscribeToDescriptorChanges(this.tag,
      (newDescriptor) => {
        this.descriptor = (newDescriptor as CellContainerDescriptor)
      }
    )
    Logger.debug(`[RNOH]: in RNCellContainer After descriptor: ${JSON.stringify(this.descriptor)}`)
    if (this.descriptor.props.top) {
      this.top = this.descriptor.props.top;
    }
  }

  aboutToDisappear() {
    this.unregisterDescriptorChangesListener?.()
  }

  setIndex(value: number): void {
    this.index = value;
  }

  getIndex(): number {
    Logger.debug(`[RNOH]: in RNCellContainer index: ${JSON.stringify(this.index)}`)
    return this.index;
  }

  build() {
    RNViewBase({ ctx: this.ctx, tag: this.tag }) {
      ForEach(this.descriptor.childrenTags, (tag: Tag) => {
        RNComponentFactory({ ctx: this.ctx, tag: tag, buildCustomComponent: this.buildCustomComponent })
      }, (tag: Tag) => tag.toString())
    }
  }
}

